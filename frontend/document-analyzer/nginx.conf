server {
    listen 80;
    server_name localhost;
      # Location for static React app files
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
      # Special case for the static fallback JSON - directly serve the file
    location = /proxied-api-response.json {
        root /usr/share/nginx/html;
        add_header Content-Type application/json;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }
    
    # Proxy API requests to the backend service
    location /api/ {
        # Log debug information
        access_log /var/log/nginx/api_access.log;
        error_log /var/log/nginx/api_error.log debug;
        
        # Properly handle CORS preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }        # Keep the /api prefix - the backend expects it
        proxy_pass http://document-analyzer-backend.document-analyzer:80;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Original-URI $request_uri;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add CORS headers to the response
        add_header 'Access-Control-Allow-Origin' 'https://document-analyzer.localhost' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
        
        # Explicitly set content type for JSON responses
        add_header Content-Type 'application/json' always;
          # Prevent caching to help with troubleshooting
        add_header Cache-Control "no-store, no-cache, must-revalidate";
        add_header Pragma "no-cache";
        expires -1;
    }
    
    # Handle requests without /api/ prefix and forward them to the backend with the /api/ prefix
    location = /analyzeDocument {
        # Forward to backend service directly without a redirect
        proxy_pass http://document-analyzer-backend.document-analyzer:80/api/analyzeDocument;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Original-URI $request_uri;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' 'https://document-analyzer.localhost' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' '*' always;
        
        # Explicitly set content type for JSON responses
        add_header Content-Type 'application/json' always;
    }
    
    # Serve static files with cache control
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        root /usr/share/nginx/html;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }
    
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
